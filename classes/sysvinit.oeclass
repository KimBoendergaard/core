## OE-lite class for handling sysvinit style init scripts and symlinks
##
## This class handles sysvinit style init scripts and symlinks. If having
## a recipe with a sysvinit script, make sure that the script is placed in
## /etc/init.d/ and make sure that the necessary useflags is setup. The
## necessary use flags are:
## <chosen name> (declare this to RECIPE_FLAGS)
## SYSVINIT_SCRIPT_<chosen name> Set this to the name of your initscript.
## <chosen name>_sysvinit_start Set this to the start level.
## <chosen name>_sysvinit_stop Set this to the stop level.
##
## The level must be a two-digit string. To omit the start/stop
## script, set <chosen name>_sysvinit_start / <chosen
## name>_sysvinit_stop to False, e.g.
##
##   DEFAULT_USE_sshd_sysvinit_stop = False
##
## @useflag sysvinit Enable or disable sysvinit. Enabled by default by base
##          distro conf.
##
## @var RDEPENDS_SYSVINIT Set the run time dependencies for sysvinit. Set to
##      sysvinit by default.

sysvinit_install_script () {
	install -d ${D}${sysconfdir}/init.d
	install -m 0755 $1 ${D}${sysconfdir}/init.d/$2
}

RDEPENDS_SYSVINIT ?= "sysvinit"
RDEPENDS_${PN}:>USE_sysvinit = " ${RDEPENDS_SYSVINIT}"

CLASS_FLAGS += "sysvinit"

do_install[postfuncs] += "do_install_sysvinit"
python do_install_sysvinit () {
    import os
    import re

    path = d.get("D")
    os.chdir(path)
    if not d.get("USE_sysvinit"):
        return

    options = ((d.get("RECIPE_FLAGS") or "").split() +
               (d.get("CLASS_FLAGS") or "").split())
    sysconfdir = d.get("sysconfdir")

    for option in options:
        if option.endswith("_sysvinit_start"):
            start_symlink = True
        elif option.endswith("_sysvinit_stop"):
            start_symlink = False
        else:
            continue
        
        prio = d.get("USE_" + option)
        if not prio:
            continue
        # "0" is the legacy way of disabling, and also what the token
        # False currently translates to.
        if prio == "0":
            continue

        # Anything but a two-digit string (or False, or "0") is a hard
        # error.
        if not re.match("[0-9][0-9]$", prio):
            bb.error("Invalid value of 'USE_%s': %s" % (option, prio))
            bb.error("Must be two-digit string or False")
            return False

        if start_symlink:
            name = option[0:-len("_sysvinit_start")]
        else:
            name = option[0:-len("_sysvinit_stop")]

        script = d.get("SYSVINIT_SCRIPT_" + name)
        if not script:
            script = name.replace("_", "-")

        src = "../init.d/%s"%(script)
        if start_symlink:
            dst_dir = ".%s/rcS.d"%(sysconfdir)
            dst_base = dst_dir + "/S"
        else:
            dst_dir = ".%s/rc0.d"%(sysconfdir)
            dst_base = dst_dir + "/K"
        dst = dst_base + prio + script
        script = ".%s/init.d/%s"%(sysconfdir, script)

        if not os.path.exists(script):
            bb.note("sysvinit script not found: %s"%script)
            continue

        if not os.path.exists(dst_dir):
            os.makedirs(dst_dir)
        if os.path.exists(dst):
            os.remove(dst)
        os.symlink(src, dst)
}

# Local Variables:
# mode: python
# End:
