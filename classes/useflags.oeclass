## Class for use flag handling.
##
## USE flags are to be defined in recipes and classes, and should be a
## space-separated list of lower-case options, preferably prefixed with
## the recipe name (in lower-case).
## Distro configuration files can then define these as needed, and set
## them to the desired values, enabling distro customization of recipes
## without the need to include anything about the distros in the
## meta-data repository holding the repository.
## A useflag may be set by:
## DEFAULT_USE (lowest priority)
## DISTRO_USE (intended for distro configs)
## MACHINE_USE (intended for machine configs)
## LOCAL_USE (intended for local.conf)
## RECIPE_USE (highest priority)

addhook set_useflags to post_recipe_parse first before blacklist after arch_update

def set_useflags(d):
    useflags = ((d.get('RECIPE_FLAGS') or "").split() +
                (d.get('CLASS_FLAGS') or "").split())
    if not useflags:
        return
    extra_arch = d.get('EXTRA_ARCH')
    overrides = (d.get('OVERRIDES') or "")
    overrides_changed = False
    for useflag in useflags:
        recipe_val = d.get('RECIPE_USE_'+useflag)
        local_val = d.get('LOCAL_USE_'+useflag)
        machine_val = d.get('MACHINE_USE_'+useflag)
        distro_val = d.get('DISTRO_USE_'+useflag)
        default_val = d.get('DEFAULT_USE_'+useflag) or "0"
        if recipe_val is not None:
            val = recipe_val
        elif local_val is not None:
            val = local_val
        elif machine_val is not None:
            if not extra_arch:
                d.set('EXTRA_ARCH', '.${MACHINE}')
            val = machine_val
        elif distro_val is not None:
            val = distro_val
        else:
            val = default_val
        #print "useflag %s = %s"%(useflag, val)
        if val and val != "0":
            d.set('USE_'+useflag, val)
            overrides += ':USE_'+useflag
            overrides_changed = True
    if overrides_changed:
        d.set('OVERRIDES', overrides)
    return

BLACKLIST_PREFIX += "LOCAL_USE_ RECIPE_USE_ MACHINE_USE_ DISTRO_USE_ DEFAULT_USE_"

addhook del_useflags to post_recipe_parse first before set_useflags after arch_update

def del_useflags(d):
    import oebakery
    useflags = ((d.get('RECIPE_FLAGS') or "").split() +
                (d.get('CLASS_FLAGS') or "").split())
    if not useflags:
        return

    pkg = d.get("PN")
    pkg_type = d.get("PACKAGE_TYPE_" + pkg) or d.get("RECIPE_TYPE")
    if not pkg_type in ("native", "sdk", "sdk-cross"):
        return

    for useflag in useflags:
        machine_val = d.get('MACHINE_USE_'+useflag)
        if machine_val is not None:
            oebakery.debug('Deleting MACHINE_USE_%s variable from %s:%s_%s'
                           %(useflag,pkg_type,pkg,d.get("PV")))
            d.del_var('MACHINE_USE_'+useflag)


# Local Variables:
# mode: python
# End:
